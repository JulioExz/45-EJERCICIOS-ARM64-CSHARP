# ------------------------------------------------------------------------------
# Nombre del Programa: Invertir una cadena
# Descripción      : Invierte una cadena 
# Autor            : [De Haro Exzacarias Julio Cesar]
# Fecha            : [05-11-2024]
# Versión          : 1.0
# Arquitectura     : ARM64 en AWS EC2
# ------------------------------------------------------------------------------
REFERENCIA
public class StringReverser {
    public static string ReverseString(string input) {
        
        char[] charArray = input.ToCharArray();
        int left = 0;
        int right = charArray.Length - 1;

       
        while (left < right) {
          
            char temp = charArray[left];
            charArray[left] = charArray[right];
            charArray[right] = temp;
            
            // Move indices toward center
            left++;
            right--;
        }
        return new string(charArray);
    }
    public static void Main() {
        string test = "Hello, World!";
        string reversed = ReverseString(test);
        Console.WriteLine($"Original: {test}");
        Console.WriteLine($"Reversed: {reversed}");
    }
}
-------------------------------------------------------------------------------------
.data
    string:     .asciz "Hello, World!"    // Input string to reverse
    str_len:    .quad 13                  // Length of string
    newline:    .asciz "\n"              // Newline character

    .text
    .global _start

_start:
    // Load string address and length
    adr x0, string         // x0 = address of string
    ldr x1, str_len       // x1 = length of string
    
    // Initialize indices
    mov x2, #0            // x2 = left index
    sub x3, x1, #1        // x3 = right index (length - 1)

reverse_loop:
    // Check if we're done (left >= right)
    cmp x2, x3
    bge done
    
    // Load characters from both ends
    ldrb w4, [x0, x2]     // w4 = string[left]
    ldrb w5, [x0, x3]     // w5 = string[right]
    
    // Swap characters
    strb w5, [x0, x2]     // string[left] = string[right]
    strb w4, [x0, x3]     // string[right] = string[left]
    
    // Move indices
    add x2, x2, #1        // left++
    sub x3, x3, #1        // right--
    
    b reverse_loop        // Continue loop

done:
    // Print reversed string
    mov x0, #1            // file descriptor (1 = stdout)
    adr x1, string        // address of string to print
    ldr x2, str_len       // length of string
    mov x8, #64           // syscall number (64 = write)
    svc #0                // make syscall
    
    // Print newline
    mov x0, #1            // file descriptor (1 = stdout)
    adr x1, newline       // address of newline
    mov x2, #1            // length of newline
    mov x8, #64           // syscall number (64 = write)
    svc #0                // make syscall
    
    // Exit program
    mov x0, #0            // return code 0
    mov x8, #93           // syscall number (93 = exit)
    svc #0                // make syscall

/*
Register usage:
x0 = string address / syscall parameter
x1 = string length / syscall parameter
x2 = left index
x3 = right index
w4 = temporary storage for left character
w5 = temporary storage for right character
x8 = syscall number
*/
    svc 0
