# ------------------------------------------------------------------------------
# Nombre del Programa: Serie de fibonacci
# Descripción      : Da los primeros n terminos de la serie de fibonacci
# Autor            : [De Haro Exzacarias Julio Cesar]
# Fecha            : [05-11-2024]
# Versión          : 1.0
# Arquitectura     : ARM64 en AWS EC2
# ------------------------------------------------------------------------------
REFERENCIA
public class Fibonacci {
    public static void PrintFibonacci(int n) {
        int first = 0, second = 1;
        
        Console.Write($"{first} {second} ");
        
        for (int i = 2; i < n; i++) {
            int next = first + second;
            Console.Write($"{next} ");
            first = second;
            second = next;
        }
    }
}
----------------------------------------------------------------------------------

.global _start
    .text
_start:
    // Initialize registers
    mov x19, #0          // first number (0)
    mov x20, #1          // second number (1)
    mov x21, #10         // n (number of terms to generate)
    mov x22, #2          // counter i = 2
    
    // Print first number
    mov x0, x19
    bl print_num
    
    // Print second number
    mov x0, x20
    bl print_num
    
loop:
    // Check if we've printed enough numbers
    cmp x22, x21
    bge end
    
    // Calculate next number
    add x23, x19, x20    // next = first + second
    
    // Print the number
    mov x0, x23
    bl print_num
    
    // Update values
    mov x19, x20         // first = second
    mov x20, x23         // second = next
    add x22, x22, #1     // i++
    b loop
    
end:
    // Exit program
    mov x0, #0
    mov x8, #93
    svc #0

print_num:
    // Function to print a number
    // Preserve registers
    stp x29, x30, [sp, #-16]!
    mov x29, sp
    
    // Convert number to string and print
    // Note: This is a simplified version. In practice,
    // you'd need more code to properly convert integers to string
    // and handle system calls for printing
    
    // Restore registers and return
    ldp x29, x30, [sp], #16
    ret
