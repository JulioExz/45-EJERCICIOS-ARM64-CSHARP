# ------------------------------------------------------------------------------
# Nombre del Programa: Busqueda binaria 
# Descripción      : Busqueda de datos binarios 
# Autor            : [De Haro Exzacarias Julio Cesar]
# Fecha            : [05-11-2024]
# Versión          : 1.0
# Arquitectura     : ARM64 en AWS EC2
# ------------------------------------------------------------------------------
public class BinarySearch
{
    public static int Search(int[] array, int target)
    {
        if (array == null || array.Length == 0)
            return -1;
            
        int left = 0;
        int right = array.Length - 1;
        
        while (left <= right)
        {
            int mid = left + (right - left) / 2;  // Avoid overflow
            
            if (array[mid] == target)
                return mid;
                
            if (array[mid] < target)
                left = mid + 1;
            else
                right = mid - 1;
        }
        
        return -1;  // Element not found
    }
}
# -------------------------------------------------------------------------------
.global binary_search
    .text

// Parameters:
// X0: array address (must be sorted)
// X1: array length
// X2: target value to find
binary_search:
    // Input validation
    cbz     x0, not_found      // If array is null, return -1
    cbz     x1, not_found      // If length is 0, return -1

    // Initialize bounds
    mov     w3, #0             // w3 = left = 0
    sub     w4, w1, #1         // w4 = right = length - 1

loop:
    cmp     w3, w4             // Compare left with right
    b.gt    not_found          // If left > right, element not found
    
    // Calculate mid = left + (right - left) / 2
    sub     w5, w4, w3         // w5 = right - left
    lsr     w5, w5, #1         // w5 = (right - left) / 2
    add     w5, w3, w5         // w5 = left + (right - left) / 2
    
    // Load array[mid]
    lsl     w6, w5, #2         // w6 = mid * 4 (multiply by 4 for int size)
    add     x6, x0, x6         // x6 = array + mid*4
    ldr     w7, [x6]           // w7 = array[mid]
    
    // Compare with target
    cmp     w7, w2             // Compare array[mid] with target
    b.eq    found              // If equal, element found
    b.gt    search_left        // If array[mid] > target, search left half
    
    // Search right half
    add     w3, w5, #1         // left = mid + 1
    b       loop

search_left:
    sub     w4, w5, #1         // right = mid - 1
    b       loop

found:
    mov     w0, w5             // Return mid index
    ret

not_found:
    mov     w0, #-1            // Return -1 (not found)
    ret
