# ------------------------------------------------------------------------------
# Nombre del Programa: Ordenamiento burbuja
# Descripción      : El ordenamiento burbuja hace múltiples pasadas 
#                    a lo largo de una lista. Compara los ítems adyacentes e 
#                    intercambia los que no están en orden.
# Autor            : [De Haro Exzacarias Julio Cesar]
# Fecha            : [05-11-2024]
# Versión          : 1.0
# Arquitectura     : ARM64 en AWS EC2
# ------------------------------------------------------------------------------
public class BubbleSort
{
    public static void Sort(int[] array)
    {
        if (array == null || array.Length == 0)
            return;

        int n = array.Length;
        for (int i = 0; i < n - 1; i++)
        {
            for (int j = 0; j < n - i - 1; j++)
            {
                if (array[j] > array[j + 1])
                {
                    // Swap array[j] and array[j+1]
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
    }
}
# -------------------------------------------------------------------------------
.global bubble_sort
    .text

// X0: Address of the array to sort
// X1: Length of the array
bubble_sort:
    // Input validation
    cbz     x0, done           // If array is null, return
    cbz     x1, done           // If length is 0, return

    // Outer loop: i = 0 to n-1
    mov     w2, #0             // w2 = i = 0
    sub     w3, x1, #1         // w3 = n-1

outer_loop:
    cmp     w2, w3             // Compare i with n-1
    b.ge    done               // If i >= n-1, we're done

    // Inner loop: j = 0 to n-i-1
    mov     w4, #0             // w4 = j = 0
    sub     w5, x1, w2         // w5 = n-i
    sub     w5, w5, #1         // w5 = n-i-1

inner_loop:
    cmp     w4, w5             // Compare j with n-i-1
    b.ge    outer_loop_inc     // If j >= n-i-1, go to outer loop increment

    // Load array[j] and array[j+1]
    lsl     w6, w4, #2         // w6 = j * 4 (multiply by 4 for int size)
    add     x6, x0, x6         // x6 = array + j*4
    ldr     w7, [x6]           // w7 = array[j]
    add     x6, x6, #4         // x6 = array + (j+1)*4
    ldr     w8, [x6]           // w8 = array[j+1]

    // Compare and swap if necessary
    cmp     w7, w8             // Compare array[j] and array[j+1]
    b.le    inner_loop_inc     // If array[j] <= array[j+1], skip swap
    
    // Swap array[j] and array[j+1]
    str     w8, [x6, #-4]      // array[j] = array[j+1]
    str     w7, [x6]           // array[j+1] = array[j]

inner_loop_inc:
    add     w4, w4, #1         // j++
    b       inner_loop

outer_loop_inc:
    add     w2, w2, #1         // i++
    b       outer_loop

done:
    ret
